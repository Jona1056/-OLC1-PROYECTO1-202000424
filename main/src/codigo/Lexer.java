/* The following code was generated by JFlex 1.4.3 on 13/03/23 19:24 */


package codigo;
import Arbol.main;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/03/23 19:24 from the specification file
 * <tt>D:/Desktop/[OLC1]PROYECTO1-202000424/main/src/codigo/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\12\2\0\1\13\22\0\1\5\1\15\1\3\1\4"+
    "\1\6\1\24\1\4\1\10\2\4\1\34\1\36\1\14\1\32\1\33"+
    "\1\16\12\2\1\25\1\26\1\17\1\4\1\20\1\31\1\4\2\1"+
    "\1\21\6\1\1\23\3\1\1\11\1\22\13\1\1\4\1\7\2\4"+
    "\1\6\1\4\2\1\1\21\6\1\1\23\3\1\1\11\1\22\13\1"+
    "\1\27\1\35\1\30\1\37\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\2\1\4\1\5"+
    "\1\3\2\1\1\6\1\2\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\2"+
    "\25\0\1\3\3\0\1\22\1\23\2\3\1\0\1\2"+
    "\4\24\1\25\1\24\1\25\1\0\1\26\3\0\1\26"+
    "\4\0\1\26\2\24\1\26\3\24\4\25\1\24\2\25"+
    "\1\0\5\24\1\25\1\0\1\2\1\24\2\27\1\26"+
    "\1\27\1\0\4\24\1\3\1\30\1\0\1\27\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\240\0\u0120\0\u0140\0\u0160\0\240\0\u0180\0\240"+
    "\0\240\0\240\0\240\0\240\0\240\0\240\0\240\0\240"+
    "\0\240\0\240\0\u01a0\0\u01c0\0\u01e0\0\u0200\0\140\0\u0220"+
    "\0\u0240\0\u0260\0\u0280\0\u02a0\0\u02c0\0\u02e0\0\u0300\0\240"+
    "\0\u0320\0\u0340\0\u0360\0\u0380\0\u03a0\0\u03c0\0\u03e0\0\u0400"+
    "\0\u0420\0\u0440\0\u0460\0\u0480\0\40\0\40\0\u04a0\0\u04c0"+
    "\0\u04e0\0\u0500\0\u0520\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0"+
    "\0\u05e0\0\u0600\0\u0620\0\u0640\0\u0620\0\u0660\0\u02c0\0\u0680"+
    "\0\u06a0\0\u06c0\0\u06e0\0\u0700\0\u0720\0\u0740\0\u0760\0\u0780"+
    "\0\u07a0\0\u07c0\0\u0620\0\u0600\0\u06e0\0\u0640\0\u07e0\0\40"+
    "\0\u0380\0\u0800\0\u0820\0\u0840\0\u0860\0\u0880\0\u08a0\0\u0480"+
    "\0\u08c0\0\u08e0\0\u0900\0\40\0\u0600\0\u0920\0\u0560\0\u0940"+
    "\0\u0960\0\u0980\0\u09a0\0\u09c0\0\40\0\100\0\u09e0\0\u0700"+
    "\0\u0920";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\2\13\1\7\1\6\1\14\1\15\1\16"+
    "\1\17\2\3\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\2\41\0\1\3"+
    "\1\33\2\0\1\34\1\3\2\0\1\3\2\34\1\35"+
    "\4\0\3\3\13\0\1\36\2\0\1\37\2\0\1\40"+
    "\4\0\2\40\1\41\22\0\1\42\1\43\1\44\1\43"+
    "\1\45\1\43\1\46\1\44\1\47\1\43\1\44\1\50"+
    "\1\46\1\51\4\43\3\44\13\43\1\52\5\0\1\50"+
    "\4\0\2\50\1\53\22\0\1\54\1\0\1\55\1\56"+
    "\2\57\1\7\1\60\2\57\1\55\2\7\1\61\4\57"+
    "\3\55\13\57\1\54\1\0\1\3\1\33\2\0\1\62"+
    "\1\3\2\0\1\3\2\62\1\63\4\0\3\3\13\0"+
    "\1\64\5\0\1\50\2\0\1\65\1\66\2\50\1\53"+
    "\22\0\1\54\1\0\1\55\1\56\2\57\1\67\1\60"+
    "\2\57\1\55\2\13\1\67\4\57\3\55\13\57\6\0"+
    "\1\50\4\0\2\50\1\53\1\0\1\70\20\0\1\54"+
    "\5\0\1\50\4\0\2\50\1\53\1\71\21\0\1\54"+
    "\1\0\1\3\1\33\2\0\1\34\1\3\2\0\1\3"+
    "\2\34\1\35\4\0\1\3\1\72\1\3\13\0\1\36"+
    "\1\0\2\33\3\0\1\33\2\0\1\33\7\0\3\33"+
    "\21\0\1\34\4\0\3\34\22\0\1\36\1\0\1\73"+
    "\1\74\2\75\1\76\1\73\2\75\1\73\2\35\1\76"+
    "\4\75\3\73\13\75\1\36\1\0\1\77\3\0\1\36"+
    "\1\77\2\0\1\77\3\36\4\0\3\77\21\0\1\40"+
    "\4\0\3\40\22\0\1\42\1\0\1\73\1\74\2\75"+
    "\1\100\1\73\2\75\1\73\2\41\1\100\4\75\3\73"+
    "\13\75\1\42\2\0\1\101\2\0\1\42\4\0\3\42"+
    "\23\0\3\102\1\103\3\102\1\104\2\102\1\0\26\102"+
    "\1\44\1\102\1\103\2\102\1\44\1\104\1\102\1\44"+
    "\1\0\6\102\3\44\14\102\1\105\1\106\1\105\1\107"+
    "\2\105\1\106\1\110\1\105\1\106\1\0\6\105\3\106"+
    "\14\105\3\102\1\103\1\102\1\111\1\102\1\104\2\102"+
    "\1\50\1\111\1\112\22\102\1\113\3\102\1\114\3\102"+
    "\1\104\1\43\1\102\1\0\26\102\1\115\1\116\1\117"+
    "\1\120\1\121\1\115\1\122\1\120\1\115\1\53\1\112"+
    "\1\121\4\120\3\115\13\120\1\113\3\102\1\123\1\124"+
    "\1\125\1\124\1\126\1\124\1\102\1\54\1\113\1\125"+
    "\4\124\3\102\13\124\1\102\1\0\1\73\1\74\2\75"+
    "\1\127\1\73\2\75\1\73\2\53\1\127\4\75\3\73"+
    "\13\75\1\54\3\0\2\130\1\131\3\130\1\0\2\54"+
    "\1\131\4\130\3\0\13\130\2\0\1\55\3\0\1\34"+
    "\1\55\2\0\1\55\3\34\4\0\3\55\13\0\1\36"+
    "\2\0\1\56\2\0\1\40\4\0\3\40\22\0\1\42"+
    "\5\0\1\57\4\0\3\57\22\0\1\54\1\0\1\55"+
    "\3\0\1\132\1\55\2\0\1\55\3\132\4\0\3\55"+
    "\13\0\1\64\1\0\1\133\1\134\2\135\1\61\1\136"+
    "\2\135\1\133\3\61\4\135\3\133\13\135\1\54\5\0"+
    "\1\62\4\0\2\62\1\63\22\0\1\64\1\0\1\73"+
    "\1\74\2\75\1\137\1\73\2\75\1\73\2\63\1\137"+
    "\4\75\3\73\13\75\1\64\1\0\1\77\1\0\2\130"+
    "\1\140\1\77\2\130\1\77\2\64\1\140\4\130\3\77"+
    "\13\130\2\0\1\55\1\56\2\57\1\67\1\60\2\57"+
    "\1\55\3\67\4\57\3\55\13\57\1\54\12\70\1\0"+
    "\25\70\15\71\1\141\22\71\1\0\1\3\1\33\2\0"+
    "\1\34\1\3\2\0\1\142\2\34\1\35\4\0\3\3"+
    "\13\0\1\36\1\0\1\73\3\0\1\75\1\73\2\0"+
    "\1\73\2\75\1\143\4\0\3\73\16\0\1\74\2\0"+
    "\1\75\4\0\2\75\1\143\30\0\1\75\4\0\2\75"+
    "\1\143\24\0\1\73\1\74\2\75\1\76\1\73\2\75"+
    "\1\73\3\76\4\75\3\73\13\75\1\36\1\0\1\77"+
    "\4\0\1\77\2\0\1\77\7\0\3\77\15\0\1\73"+
    "\1\74\2\75\1\100\1\73\2\75\1\73\3\100\4\75"+
    "\3\73\13\75\1\42\2\0\1\101\35\0\3\102\1\144"+
    "\3\102\1\104\2\102\1\0\25\102\3\0\1\103\34\0"+
    "\3\102\1\145\3\102\1\104\2\102\1\0\25\102\1\0"+
    "\1\106\1\0\1\103\2\0\1\106\2\0\1\106\7\0"+
    "\3\106\17\0\1\146\4\0\1\105\27\0\3\102\1\144"+
    "\1\102\1\111\1\102\1\104\2\102\1\50\1\111\1\112"+
    "\22\102\1\113\1\102\1\115\1\116\1\147\1\120\1\121"+
    "\1\115\1\122\1\120\1\115\1\53\1\112\1\121\4\120"+
    "\3\115\13\120\1\113\3\102\1\130\1\124\1\125\1\124"+
    "\1\126\1\124\1\102\1\54\1\113\1\125\4\124\3\102"+
    "\13\124\4\102\1\103\3\102\1\150\2\102\1\0\26\102"+
    "\1\115\1\102\1\144\1\102\1\120\1\115\1\104\1\102"+
    "\1\115\1\75\1\120\1\151\4\102\3\115\16\102\1\116"+
    "\1\144\1\102\1\120\1\102\1\104\2\102\1\75\1\120"+
    "\1\151\23\102\3\0\1\103\1\0\1\75\4\0\2\75"+
    "\1\143\23\0\3\102\1\144\1\102\1\120\1\102\1\104"+
    "\2\102\1\75\1\120\1\151\24\102\1\115\1\116\1\147"+
    "\1\120\1\121\1\115\1\122\1\120\1\115\1\127\2\121"+
    "\4\120\3\115\13\120\1\113\3\102\1\145\1\102\1\120"+
    "\1\102\1\104\2\102\1\75\1\120\1\151\23\102\1\0"+
    "\1\73\1\74\2\75\1\127\1\73\2\75\1\73\3\127"+
    "\4\75\3\73\13\75\1\54\5\0\1\132\4\0\3\132"+
    "\22\0\1\64\1\0\1\133\3\0\1\152\1\133\2\0"+
    "\1\133\2\152\1\76\4\0\3\133\13\0\1\36\2\0"+
    "\1\134\2\0\1\153\4\0\2\153\1\100\22\0\1\42"+
    "\5\0\1\135\4\0\2\135\1\127\22\0\1\54\1\0"+
    "\1\133\3\0\1\154\1\133\2\0\1\133\2\154\1\137"+
    "\4\0\3\133\13\0\1\64\1\0\1\73\1\74\2\75"+
    "\1\137\1\73\2\75\1\73\3\137\4\75\3\73\13\75"+
    "\1\64\20\0\1\155\20\0\1\3\1\33\2\0\1\34"+
    "\1\3\2\0\1\3\2\34\1\35\4\0\2\3\1\156"+
    "\13\0\1\36\1\0\1\73\1\74\2\75\1\143\1\73"+
    "\2\75\1\73\3\143\4\75\3\73\13\75\4\0\1\103"+
    "\3\0\1\157\30\0\3\102\1\160\3\102\1\104\2\102"+
    "\1\0\26\102\1\115\1\116\1\147\1\120\1\151\1\115"+
    "\1\122\1\120\1\115\1\143\2\151\4\120\3\115\13\120"+
    "\1\102\5\0\1\152\4\0\2\152\1\76\22\0\1\36"+
    "\5\0\1\153\4\0\2\153\1\100\22\0\1\42\5\0"+
    "\1\154\4\0\2\154\1\137\22\0\1\64\3\0\1\161"+
    "\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\25\0\1\1\3\0\2\11\2\1"+
    "\1\0\10\1\1\0\1\1\3\0\1\1\4\0\14\1"+
    "\1\11\1\1\1\0\6\1\1\0\2\1\1\11\3\1"+
    "\1\0\4\1\1\11\1\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 110) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return new Symbol(sym.Com1,yyline,yychar, yytext());
          }
        case 25: break;
        case 15: 
          { return new Symbol(sym.KLEENE,yyline,yychar, yytext());
          }
        case 26: break;
        case 10: 
          { return new Symbol(sym.Llave_a,yyline,yychar, yytext());
          }
        case 27: break;
        case 7: 
          { return new Symbol(sym.Porcentaje,yyline,yychar, yytext());
          }
        case 28: break;
        case 11: 
          { return new Symbol(sym.Llave_c,yyline,yychar, yytext());
          }
        case 29: break;
        case 6: 
          { return new Symbol(sym.Mayor,yyline,yychar, yytext());
          }
        case 30: break;
        case 23: 
          { return new Symbol(sym.Oracion2, yychar, yyline, yytext());
          }
        case 31: break;
        case 16: 
          { return new Symbol(sym.OR,yyline,yychar, yytext());
          }
        case 32: break;
        case 20: 
          { return new Symbol(sym.CON, yychar, yyline, yytext());
          }
        case 33: break;
        case 14: 
          { return new Symbol(sym.PUNTO1,yyline,yychar, yytext());
          }
        case 34: break;
        case 4: 
          { return new Symbol(sym.Barra,yyline,yychar, yytext());
          }
        case 35: break;
        case 21: 
          { return new Symbol(sym.CON1, yychar, yyline, yytext());
          }
        case 36: break;
        case 8: 
          { return new Symbol(sym.D_puntos,yyline,yychar, yytext());
          }
        case 37: break;
        case 22: 
          { return new Symbol(sym.Oracion, yychar, yyline, yytext());
          }
        case 38: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 39: break;
        case 19: 
          { return new Symbol(sym.Com2,yyline,yychar, yytext());
          }
        case 40: break;
        case 5: 
          { return new Symbol(sym.Comilla_s,yyline,yychar, yytext());
          }
        case 41: break;
        case 1: 
          { Errores.addErrores(yytext().toString(),yyline,yychar,"LEXICO",yytext().toString());

System.out.println("Este es un error lexico: "+yytext() + ", en la linea: "+yyline+", en la columna: "+yychar);
          }
        case 42: break;
        case 13: 
          { return new Symbol(sym.Guion,yyline,yychar, yytext());
          }
        case 43: break;
        case 24: 
          { return new Symbol(sym.Conjunto,yyline,yychar, yytext());
          }
        case 44: break;
        case 12: 
          { return new Symbol(sym.Interrogacion,yyline,yychar, yytext());
          }
        case 45: break;
        case 9: 
          { return new Symbol(sym.P_coma,yyline,yychar, yytext());
          }
        case 46: break;
        case 17: 
          { return new Symbol(sym.SUMA,yyline,yychar, yytext());
          }
        case 47: break;
        case 3: 
          { 
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
